int kprobe_sys_renameat(struct pt_regs * ctx):
; int kprobe_sys_renameat(struct pt_regs* ctx)
   0: (bf) r8 = r1
; bpf_probe_read(&real_ctx, sizeof(struct pt_regs), (void *)PT_REGS_PARM1(ctx));
   1: (79) r3 = *(u64 *)(r8 +112)
   2: (bf) r6 = r10
; 
   3: (07) r6 += -184
; bpf_probe_read(&real_ctx, sizeof(struct pt_regs), (void *)PT_REGS_PARM1(ctx));
   4: (bf) r1 = r6
   5: (b7) r2 = 168
   6: (85) call bpf_probe_read_compat#-45600
   7: (b7) r7 = 0
; char *newname = (char*)PT_REGS_PARM4_SYSCALL(preal_ctx);
   8: (79) r9 = *(u64 *)(r6 +56)
; int newdfd = PT_REGS_PARM3(preal_ctx);
   9: (79) r2 = *(u64 *)(r6 +96)
; int olddfd = PT_REGS_PARM1(preal_ctx);
  10: (79) r1 = *(u64 *)(r6 +112)
; char *oldname = (char*)PT_REGS_PARM2(preal_ctx);
  11: (79) r6 = *(u64 *)(r6 +104)
; if(oldname == NULL || newname == NULL)
  12: (15) if r6 == 0x0 goto pc+257
  13: (15) if r9 == 0x0 goto pc+256
  14: (7b) *(u64 *)(r10 -208) = r2
  15: (7b) *(u64 *)(r10 -200) = r1
  16: (7b) *(u64 *)(r10 -192) = r8
  17: (b7) r7 = 0
; int map_id = 0;
  18: (63) *(u32 *)(r10 -16) = r7
  19: (bf) r2 = r10
; 
  20: (07) r2 += -16
; map_value = bpf_map_lookup_elem(&data_tmp_store_map, &map_id);
  21: (18) r1 = map[id:1]
  23: (85) call percpu_array_map_lookup_elem#149152
  24: (bf) r8 = r0
; if (!map_value) {
  25: (15) if r8 == 0x0 goto pc+244
  26: (b7) r7 = 0
; pFileData-&gt;pathlen = 0;	
  27: (73) *(u8 *)(r8 +47) = r7
  28: (73) *(u8 *)(r8 +46) = r7
  29: (73) *(u8 *)(r8 +45) = r7
  30: (73) *(u8 *)(r8 +44) = r7
  31: (63) *(u32 *)(r10 -8) = r7
; u32 ret = save_str_to_buf(pFileData-&gt;filepath, pFileData-&gt;pathlen, oldname, 0);
  32: (bf) r1 = r8
  33: (07) r1 += 48
  34: (bf) r3 = r10
; 
  35: (07) r3 += -8
  36: (7b) *(u64 *)(r10 -216) = r1
; bpf_probe_read(&buf[buf_off & (MAX_PERCPU_BUFSIZE - 1)], sizeof(enType), &enType);
  37: (b7) r2 = 4
  38: (85) call bpf_probe_read_compat#-45600
; int sz = bpf_probe_read_str(&(buf[buf_off + sizeof(enType) + sizeof(int)]), MAX_STRING_SIZE, ptr);
  39: (bf) r1 = r8
  40: (07) r1 += 56
; int sz = bpf_probe_read_str(&(buf[buf_off + sizeof(enType) + sizeof(int)]), MAX_STRING_SIZE, ptr);
  41: (b7) r2 = 4096
  42: (bf) r3 = r6
  43: (85) call bpf_probe_read_compat_str#-46512
; int sz = bpf_probe_read_str(&(buf[buf_off + sizeof(enType) + sizeof(int)]), MAX_STRING_SIZE, ptr);
  44: (63) *(u32 *)(r10 -12) = r0
; int sz = bpf_probe_read_str(&(buf[buf_off + sizeof(enType) + sizeof(int)]), MAX_STRING_SIZE, ptr);
  45: (67) r0 &lt;&lt;= 32
  46: (c7) r0 s&gt;&gt;= 32
; if (sz &gt; 0) {
  47: (65) if r0 s&gt; 0x0 goto pc+1
  48: (05) goto pc+221
; bpf_probe_read(&(buf[buf_off + sizeof(enType)]), sizeof(int), &sz);		
  49: (bf) r1 = r8
  50: (07) r1 += 52
  51: (bf) r3 = r10
; 
  52: (07) r3 += -12
; bpf_probe_read(&(buf[buf_off + sizeof(enType)]), sizeof(int), &sz);		
  53: (b7) r2 = 4
  54: (85) call bpf_probe_read_compat#-45600
; buf_off += sz + sizeof(enType) + sizeof(int);
  55: (61) r3 = *(u32 *)(r10 -12)
; buf_off += sz + sizeof(enType) + sizeof(int);
  56: (bf) r1 = r3
  57: (07) r1 += 8
  58: (bf) r6 = r1
  59: (67) r6 &lt;&lt;= 32
  60: (77) r6 &gt;&gt;= 32
; if(!ret)
  61: (15) if r6 == 0x0 goto pc+208
; pFileData-&gt;pathlen = ret;
  62: (bf) r2 = r1
  63: (77) r2 &gt;&gt;= 24
  64: (73) *(u8 *)(r8 +47) = r2
  65: (bf) r2 = r1
  66: (77) r2 &gt;&gt;= 16
  67: (73) *(u8 *)(r8 +46) = r2
  68: (bf) r2 = r1
  69: (77) r2 &gt;&gt;= 8
  70: (73) *(u8 *)(r8 +45) = r2
  71: (73) *(u8 *)(r8 +44) = r1
  72: (b7) r1 = 1
  73: (63) *(u32 *)(r10 -8) = r1
; if (buf_off &gt; MAX_VALID_BUFSIZE - MAX_STRING_SIZE - sizeof(int) - sizeof(enType))
  74: (25) if r6 &gt; 0x2ff8 goto pc+17
  75: (7b) *(u64 *)(r10 -232) = r3
  76: (79) r1 = *(u64 *)(r10 -216)
; bpf_probe_read(&buf[buf_off & (MAX_PERCPU_BUFSIZE - 1)], sizeof(enType), &enType);
  77: (0f) r1 += r6
; bpf_probe_read(&buf[buf_off & (MAX_PERCPU_BUFSIZE - 1)], sizeof(enType), &enType);
  78: (7b) *(u64 *)(r10 -224) = r1
  79: (bf) r3 = r10
; bpf_probe_read(&buf[buf_off & (MAX_PERCPU_BUFSIZE - 1)], sizeof(enType), &enType);
  80: (07) r3 += -8
; bpf_probe_read(&buf[buf_off & (MAX_PERCPU_BUFSIZE - 1)], sizeof(enType), &enType);
  81: (b7) r2 = 4
  82: (85) call bpf_probe_read_compat#-45600
  83: (79) r1 = *(u64 *)(r10 -224)
; int sz = bpf_probe_read_str(&(buf[buf_off + sizeof(enType) + sizeof(int)]), MAX_STRING_SIZE, ptr);
  84: (07) r1 += 8
; int sz = bpf_probe_read_str(&(buf[buf_off + sizeof(enType) + sizeof(int)]), MAX_STRING_SIZE, ptr);
  85: (b7) r2 = 4096
  86: (bf) r3 = r9
  87: (85) call bpf_probe_read_compat_str#-46512
; int sz = bpf_probe_read_str(&(buf[buf_off + sizeof(enType) + sizeof(int)]), MAX_STRING_SIZE, ptr);
  88: (63) *(u32 *)(r10 -12) = r0
; int sz = bpf_probe_read_str(&(buf[buf_off + sizeof(enType) + sizeof(int)]), MAX_STRING_SIZE, ptr);
  89: (67) r0 &lt;&lt;= 32
  90: (c7) r0 s&gt;&gt;= 32
; if (sz &gt; 0) {
  91: (65) if r0 s&gt; 0x0 goto pc+1
  92: (05) goto pc+177
; if ((buf_off + sizeof(enType)) &lt;= MAX_VALID_BUFSIZE - MAX_STRING_SIZE - sizeof(int)) 
  93: (79) r1 = *(u64 *)(r10 -216)
  94: (0f) r6 += r1
; bpf_probe_read(&(buf[buf_off + sizeof(enType)]), sizeof(int), &sz);		
  95: (07) r6 += 4
  96: (bf) r3 = r10
; if ((buf_off + sizeof(enType)) &lt;= MAX_VALID_BUFSIZE - MAX_STRING_SIZE - sizeof(int)) 
  97: (07) r3 += -12
; bpf_probe_read(&(buf[buf_off + sizeof(enType)]), sizeof(int), &sz);		
  98: (bf) r1 = r6
  99: (b7) r2 = 4
 100: (85) call bpf_probe_read_compat#-45600
; buf_off += sz + sizeof(enType) + sizeof(int);
 101: (61) r1 = *(u32 *)(r10 -12)
 102: (79) r3 = *(u64 *)(r10 -232)
; buf_off += sz + sizeof(enType) + sizeof(int);
 103: (0f) r3 += r1
; buf_off += sz + sizeof(enType) + sizeof(int);
 104: (07) r3 += 16
 105: (bf) r1 = r3
 106: (67) r1 &lt;&lt;= 32
 107: (77) r1 &gt;&gt;= 32
; if(ret)
 108: (15) if r1 == 0x0 goto pc+161
 109: (b7) r1 = 77
; pFileData-&gt;header.magic = HEADER_MAGIC;
 110: (73) *(u8 *)(r8 +3) = r1
 111: (b7) r1 = 68
 112: (73) *(u8 *)(r8 +1) = r1
 113: (b7) r1 = 84
 114: (73) *(u8 *)(r8 +2) = r1
 115: (73) *(u8 *)(r8 +0) = r1
 116: (b7) r7 = 1
; pFileData-&gt;header.protover = PROTOCOL_VERSION;
 117: (73) *(u8 *)(r8 +4) = r7
; pFileData-&gt;type = type;
 118: (73) *(u8 *)(r8 +28) = r7
 119: (b7) r1 = 2
; pFileData-&gt;header.minor_cmd = MDCMD_FILEEVENT_RENAME;
 120: (73) *(u8 *)(r8 +7) = r1
 121: (b7) r1 = 3
; pFileData-&gt;header.major_cmd = MULTIDATA_FILEEVENT;
 122: (73) *(u8 *)(r8 +6) = r1
 123: (79) r2 = *(u64 *)(r10 -208)
; pFileData-&gt;newdfd = newdfd;
 124: (bf) r1 = r2
 125: (77) r1 &gt;&gt;= 24
 126: (73) *(u8 *)(r8 +39) = r1
 127: (bf) r1 = r2
 128: (77) r1 &gt;&gt;= 16
 129: (73) *(u8 *)(r8 +38) = r1
 130: (73) *(u8 *)(r8 +36) = r2
 131: (77) r2 &gt;&gt;= 8
 132: (73) *(u8 *)(r8 +37) = r2
 133: (79) r2 = *(u64 *)(r10 -200)
; pFileData-&gt;olddfd = olddfd;	
 134: (bf) r1 = r2
 135: (77) r1 &gt;&gt;= 24
 136: (73) *(u8 *)(r8 +35) = r1
 137: (bf) r1 = r2
 138: (77) r1 &gt;&gt;= 16
 139: (73) *(u8 *)(r8 +34) = r1
 140: (73) *(u8 *)(r8 +32) = r2
 141: (77) r2 &gt;&gt;= 8
 142: (73) *(u8 *)(r8 +33) = r2
; pFileData-&gt;pathlen = ret;
 143: (bf) r1 = r3
 144: (77) r1 &gt;&gt;= 24
 145: (73) *(u8 *)(r8 +47) = r1
 146: (bf) r1 = r3
 147: (77) r1 &gt;&gt;= 16
 148: (73) *(u8 *)(r8 +46) = r1
 149: (73) *(u8 *)(r8 +44) = r3
 150: (77) r3 &gt;&gt;= 8
 151: (73) *(u8 *)(r8 +45) = r3
 152: (b7) r9 = 0
; pFileData-&gt;flags = flags;
 153: (73) *(u8 *)(r8 +43) = r9
 154: (73) *(u8 *)(r8 +42) = r9
 155: (73) *(u8 *)(r8 +41) = r9
 156: (73) *(u8 *)(r8 +40) = r9
; pFileData-&gt;header.protover = PROTOCOL_VERSION;
 157: (73) *(u8 *)(r8 +5) = r9
; pFileData-&gt;type = type;
 158: (73) *(u8 *)(r8 +31) = r9
 159: (73) *(u8 *)(r8 +30) = r9
 160: (73) *(u8 *)(r8 +29) = r9
; u32 tgid = bpf_get_current_pid_tgid() &gt;&gt; 32;
 161: (85) call bpf_get_current_pid_tgid#124560
 162: (bf) r6 = r0
; u32 tid = bpf_get_current_pid_tgid();
 163: (7b) *(u64 *)(r10 -200) = r6
; pFileData-&gt;pid = tgid;
 164: (77) r6 &gt;&gt;= 56
; u32 tid = bpf_get_current_pid_tgid();
 165: (85) call bpf_get_current_pid_tgid#124560
 166: (7b) *(u64 *)(r10 -208) = r0
; pFileData-&gt;pid = tgid;
 167: (73) *(u8 *)(r8 +27) = r6
 168: (79) r6 = *(u64 *)(r10 -200)
 169: (bf) r1 = r6
 170: (77) r1 &gt;&gt;= 48
 171: (73) *(u8 *)(r8 +26) = r1
 172: (bf) r1 = r6
 173: (77) r1 &gt;&gt;= 40
 174: (73) *(u8 *)(r8 +25) = r1
; u32 tgid = bpf_get_current_pid_tgid() &gt;&gt; 32;
 175: (77) r6 &gt;&gt;= 32
; pFileData-&gt;pid = tgid;
 176: (73) *(u8 *)(r8 +24) = r6
; pFileData-&gt;ktime_event = bpf_ktime_get_ns();
 177: (85) call bpf_ktime_get_ns#124928
; pFileData-&gt;ktime_proc = 0;
 178: (73) *(u8 *)(r8 +23) = r9
 179: (73) *(u8 *)(r8 +22) = r9
 180: (73) *(u8 *)(r8 +21) = r9
 181: (73) *(u8 *)(r8 +20) = r9
 182: (73) *(u8 *)(r8 +19) = r9
 183: (73) *(u8 *)(r8 +18) = r9
 184: (73) *(u8 *)(r8 +17) = r9
 185: (73) *(u8 *)(r8 +16) = r9
; pFileData-&gt;ktime_event = bpf_ktime_get_ns();
 186: (bf) r1 = r0
 187: (77) r1 &gt;&gt;= 56
 188: (73) *(u8 *)(r8 +15) = r1
 189: (bf) r1 = r0
 190: (77) r1 &gt;&gt;= 48
 191: (73) *(u8 *)(r8 +14) = r1
 192: (bf) r1 = r0
 193: (77) r1 &gt;&gt;= 40
 194: (73) *(u8 *)(r8 +13) = r1
 195: (bf) r1 = r0
 196: (77) r1 &gt;&gt;= 32
 197: (73) *(u8 *)(r8 +12) = r1
 198: (bf) r1 = r0
 199: (77) r1 &gt;&gt;= 24
 200: (73) *(u8 *)(r8 +11) = r1
 201: (bf) r1 = r0
 202: (77) r1 &gt;&gt;= 16
 203: (73) *(u8 *)(r8 +10) = r1
 204: (73) *(u8 *)(r8 +8) = r0
 205: (77) r0 &gt;&gt;= 8
 206: (73) *(u8 *)(r8 +9) = r0
; struct task_struct *task = bpf_get_current_task();
 207: (85) call bpf_get_current_task#-55200
; if(task)
 208: (15) if r0 == 0x0 goto pc+48
 209: (79) r1 = *(u64 *)(r10 -208)
; u32 tid = bpf_get_current_pid_tgid();
 210: (67) r1 &lt;&lt;= 32
 211: (77) r1 &gt;&gt;= 32
; if(tgid != tid)
 212: (1d) if r6 == r1 goto pc+10
 213: (b7) r1 = 0
; struct task_struct *group_leader = READ_KERN(task-&gt;group_leader);
 214: (7b) *(u64 *)(r10 -8) = r1
 215: (b7) r1 = 2368
 216: (0f) r0 += r1
 217: (bf) r1 = r10
; 
 218: (07) r1 += -8
; struct task_struct *group_leader = READ_KERN(task-&gt;group_leader);
 219: (b7) r2 = 8
 220: (bf) r3 = r0
 221: (85) call bpf_probe_read_kernel#-51920
 222: (79) r0 = *(u64 *)(r10 -8)
 223: (b7) r1 = 0
; if(task == NULL)
 224: (15) if r0 == 0x0 goto pc+11
 225: (b7) r1 = 0
; stime = READ_KERN(new_task-&gt;start_boottime);
 226: (b7) r1 = 0
; stime = READ_KERN(task-&gt;real_start_time);
 227: (7b) *(u64 *)(r10 -8) = r1
 228: (b7) r1 = 2664
 229: (0f) r0 += r1
 230: (bf) r1 = r10
; 
 231: (07) r1 += -8
 232: (b7) r2 = 8
 233: (bf) r3 = r0
 234: (85) call bpf_probe_read_kernel#-51920
 235: (79) r1 = *(u64 *)(r10 -8)
; pFileData-&gt;ktime_proc = get_task_start_time(task);
 236: (bf) r2 = r1
 237: (77) r2 &gt;&gt;= 56
 238: (73) *(u8 *)(r8 +23) = r2
 239: (bf) r2 = r1
 240: (77) r2 &gt;&gt;= 48
 241: (73) *(u8 *)(r8 +22) = r2
 242: (bf) r2 = r1
 243: (77) r2 &gt;&gt;= 40
 244: (73) *(u8 *)(r8 +21) = r2
 245: (bf) r2 = r1
 246: (77) r2 &gt;&gt;= 32
 247: (73) *(u8 *)(r8 +20) = r2
 248: (bf) r2 = r1
 249: (77) r2 &gt;&gt;= 24
 250: (73) *(u8 *)(r8 +19) = r2
 251: (bf) r2 = r1
 252: (77) r2 &gt;&gt;= 16
 253: (73) *(u8 *)(r8 +18) = r2
 254: (73) *(u8 *)(r8 +16) = r1
 255: (77) r1 &gt;&gt;= 8
 256: (73) *(u8 *)(r8 +17) = r1
; bufflength = bufflength - MAX_VALID_BUFSIZE + pFileData-&gt;pathlen;
 257: (71) r5 = *(u8 *)(r8 +45)
 258: (67) r5 &lt;&lt;= 8
 259: (71) r1 = *(u8 *)(r8 +44)
 260: (4f) r5 |= r1
; bufflength = bufflength - MAX_VALID_BUFSIZE + pFileData-&gt;pathlen;
 261: (07) r5 += 8240
; bufflength = bufflength & (MAX_VALID_BUFSIZE - 1);
 262: (57) r5 &= 16383
; bpf_perf_event_output(ctx, &perf_event_array_map, BPF_F_CURRENT_CPU, map_value, bufflength);
 263: (79) r1 = *(u64 *)(r10 -192)
 264: (18) r2 = map[id:2]
 266: (18) r3 = 0xffffffff
 268: (bf) r4 = r8
 269: (85) call bpf_perf_event_output#-50016
; return get_rename_event(ctx, 1, olddfd, oldname, newdfd, newname, 0);
 270: (bf) r0 = r7
 271: (95) exit
