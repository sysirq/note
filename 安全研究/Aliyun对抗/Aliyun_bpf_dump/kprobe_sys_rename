int kprobe_sys_rename(struct pt_regs * ctx):
; int kprobe_sys_rename(struct pt_regs* ctx)
   0: (bf) r8 = r1
; bpf_probe_read(&real_ctx, sizeof(struct pt_regs), (void *)PT_REGS_PARM1(ctx));
   1: (79) r3 = *(u64 *)(r8 +112)
   2: (bf) r7 = r10
; 
   3: (07) r7 += -184
; bpf_probe_read(&real_ctx, sizeof(struct pt_regs), (void *)PT_REGS_PARM1(ctx));
   4: (bf) r1 = r7
   5: (b7) r2 = 168
   6: (85) call bpf_probe_read_compat#-45600
   7: (b7) r6 = 0
; char *newname = (char*)PT_REGS_PARM2(preal_ctx);
   8: (79) r9 = *(u64 *)(r7 +104)
; char *oldname = (char*)PT_REGS_PARM1(preal_ctx);
   9: (79) r7 = *(u64 *)(r7 +112)
; if(oldname == NULL || newname == NULL)
  10: (15) if r7 == 0x0 goto pc+243
  11: (15) if r9 == 0x0 goto pc+242
  12: (7b) *(u64 *)(r10 -192) = r8
  13: (b7) r6 = 0
; int map_id = 0;
  14: (63) *(u32 *)(r10 -16) = r6
  15: (bf) r2 = r10
; 
  16: (07) r2 += -16
; map_value = bpf_map_lookup_elem(&data_tmp_store_map, &map_id);
  17: (18) r1 = map[id:1]
  19: (85) call percpu_array_map_lookup_elem#149152
  20: (bf) r8 = r0
; if (!map_value) {
  21: (15) if r8 == 0x0 goto pc+232
  22: (b7) r6 = 0
; pFileData-&gt;pathlen = 0;	
  23: (73) *(u8 *)(r8 +47) = r6
  24: (73) *(u8 *)(r8 +46) = r6
  25: (73) *(u8 *)(r8 +45) = r6
  26: (73) *(u8 *)(r8 +44) = r6
  27: (63) *(u32 *)(r10 -8) = r6
; u32 ret = save_str_to_buf(pFileData-&gt;filepath, pFileData-&gt;pathlen, oldname, 0);
  28: (bf) r1 = r8
  29: (07) r1 += 48
  30: (bf) r3 = r10
; 
  31: (07) r3 += -8
  32: (7b) *(u64 *)(r10 -200) = r1
; bpf_probe_read(&buf[buf_off & (MAX_PERCPU_BUFSIZE - 1)], sizeof(enType), &enType);
  33: (b7) r2 = 4
  34: (85) call bpf_probe_read_compat#-45600
; int sz = bpf_probe_read_str(&(buf[buf_off + sizeof(enType) + sizeof(int)]), MAX_STRING_SIZE, ptr);
  35: (bf) r1 = r8
  36: (07) r1 += 56
; int sz = bpf_probe_read_str(&(buf[buf_off + sizeof(enType) + sizeof(int)]), MAX_STRING_SIZE, ptr);
  37: (b7) r2 = 4096
  38: (bf) r3 = r7
  39: (85) call bpf_probe_read_compat_str#-46512
; int sz = bpf_probe_read_str(&(buf[buf_off + sizeof(enType) + sizeof(int)]), MAX_STRING_SIZE, ptr);
  40: (63) *(u32 *)(r10 -12) = r0
; int sz = bpf_probe_read_str(&(buf[buf_off + sizeof(enType) + sizeof(int)]), MAX_STRING_SIZE, ptr);
  41: (67) r0 &lt;&lt;= 32
  42: (c7) r0 s&gt;&gt;= 32
; if (sz &gt; 0) {
  43: (65) if r0 s&gt; 0x0 goto pc+1
  44: (05) goto pc+209
; bpf_probe_read(&(buf[buf_off + sizeof(enType)]), sizeof(int), &sz);		
  45: (bf) r1 = r8
  46: (07) r1 += 52
  47: (bf) r3 = r10
; 
  48: (07) r3 += -12
; bpf_probe_read(&(buf[buf_off + sizeof(enType)]), sizeof(int), &sz);		
  49: (b7) r2 = 4
  50: (85) call bpf_probe_read_compat#-45600
; buf_off += sz + sizeof(enType) + sizeof(int);
  51: (61) r3 = *(u32 *)(r10 -12)
; buf_off += sz + sizeof(enType) + sizeof(int);
  52: (bf) r1 = r3
  53: (07) r1 += 8
  54: (bf) r7 = r1
  55: (67) r7 &lt;&lt;= 32
  56: (77) r7 &gt;&gt;= 32
; if(!ret)
  57: (15) if r7 == 0x0 goto pc+196
; pFileData-&gt;pathlen = ret;
  58: (bf) r2 = r1
  59: (77) r2 &gt;&gt;= 24
  60: (73) *(u8 *)(r8 +47) = r2
  61: (bf) r2 = r1
  62: (77) r2 &gt;&gt;= 16
  63: (73) *(u8 *)(r8 +46) = r2
  64: (bf) r2 = r1
  65: (77) r2 &gt;&gt;= 8
  66: (73) *(u8 *)(r8 +45) = r2
  67: (73) *(u8 *)(r8 +44) = r1
  68: (b7) r1 = 1
  69: (63) *(u32 *)(r10 -8) = r1
; if (buf_off &gt; MAX_VALID_BUFSIZE - MAX_STRING_SIZE - sizeof(int) - sizeof(enType))
  70: (25) if r7 &gt; 0x2ff8 goto pc+17
  71: (7b) *(u64 *)(r10 -216) = r3
  72: (79) r1 = *(u64 *)(r10 -200)
; bpf_probe_read(&buf[buf_off & (MAX_PERCPU_BUFSIZE - 1)], sizeof(enType), &enType);
  73: (0f) r1 += r7
; bpf_probe_read(&buf[buf_off & (MAX_PERCPU_BUFSIZE - 1)], sizeof(enType), &enType);
  74: (7b) *(u64 *)(r10 -208) = r1
  75: (bf) r3 = r10
; bpf_probe_read(&buf[buf_off & (MAX_PERCPU_BUFSIZE - 1)], sizeof(enType), &enType);
  76: (07) r3 += -8
; bpf_probe_read(&buf[buf_off & (MAX_PERCPU_BUFSIZE - 1)], sizeof(enType), &enType);
  77: (b7) r2 = 4
  78: (85) call bpf_probe_read_compat#-45600
  79: (79) r1 = *(u64 *)(r10 -208)
; int sz = bpf_probe_read_str(&(buf[buf_off + sizeof(enType) + sizeof(int)]), MAX_STRING_SIZE, ptr);
  80: (07) r1 += 8
; int sz = bpf_probe_read_str(&(buf[buf_off + sizeof(enType) + sizeof(int)]), MAX_STRING_SIZE, ptr);
  81: (b7) r2 = 4096
  82: (bf) r3 = r9
  83: (85) call bpf_probe_read_compat_str#-46512
; int sz = bpf_probe_read_str(&(buf[buf_off + sizeof(enType) + sizeof(int)]), MAX_STRING_SIZE, ptr);
  84: (63) *(u32 *)(r10 -12) = r0
; int sz = bpf_probe_read_str(&(buf[buf_off + sizeof(enType) + sizeof(int)]), MAX_STRING_SIZE, ptr);
  85: (67) r0 &lt;&lt;= 32
  86: (c7) r0 s&gt;&gt;= 32
; if (sz &gt; 0) {
  87: (65) if r0 s&gt; 0x0 goto pc+1
  88: (05) goto pc+165
; if ((buf_off + sizeof(enType)) &lt;= MAX_VALID_BUFSIZE - MAX_STRING_SIZE - sizeof(int)) 
  89: (79) r1 = *(u64 *)(r10 -200)
  90: (0f) r7 += r1
; bpf_probe_read(&(buf[buf_off + sizeof(enType)]), sizeof(int), &sz);		
  91: (07) r7 += 4
  92: (bf) r3 = r10
; if ((buf_off + sizeof(enType)) &lt;= MAX_VALID_BUFSIZE - MAX_STRING_SIZE - sizeof(int)) 
  93: (07) r3 += -12
; bpf_probe_read(&(buf[buf_off + sizeof(enType)]), sizeof(int), &sz);		
  94: (bf) r1 = r7
  95: (b7) r2 = 4
  96: (85) call bpf_probe_read_compat#-45600
; buf_off += sz + sizeof(enType) + sizeof(int);
  97: (61) r1 = *(u32 *)(r10 -12)
  98: (79) r2 = *(u64 *)(r10 -216)
; buf_off += sz + sizeof(enType) + sizeof(int);
  99: (0f) r2 += r1
; buf_off += sz + sizeof(enType) + sizeof(int);
 100: (07) r2 += 16
 101: (bf) r1 = r2
 102: (67) r1 &lt;&lt;= 32
 103: (77) r1 &gt;&gt;= 32
; if(ret)
 104: (15) if r1 == 0x0 goto pc+149
 105: (b7) r6 = 1
; pFileData-&gt;header.protover = PROTOCOL_VERSION;
 106: (73) *(u8 *)(r8 +4) = r6
 107: (b7) r1 = 77
; pFileData-&gt;header.magic = HEADER_MAGIC;
 108: (73) *(u8 *)(r8 +3) = r1
 109: (b7) r1 = 68
 110: (73) *(u8 *)(r8 +1) = r1
 111: (b7) r1 = 84
 112: (73) *(u8 *)(r8 +2) = r1
 113: (73) *(u8 *)(r8 +0) = r1
 114: (b7) r1 = 2
; pFileData-&gt;header.minor_cmd = MDCMD_FILEEVENT_RENAME;
 115: (73) *(u8 *)(r8 +7) = r1
 116: (b7) r1 = 3
; pFileData-&gt;header.major_cmd = MULTIDATA_FILEEVENT;
 117: (73) *(u8 *)(r8 +6) = r1
; pFileData-&gt;pathlen = ret;
 118: (bf) r1 = r2
 119: (77) r1 &gt;&gt;= 24
 120: (73) *(u8 *)(r8 +47) = r1
 121: (bf) r1 = r2
 122: (77) r1 &gt;&gt;= 16
 123: (73) *(u8 *)(r8 +46) = r1
 124: (73) *(u8 *)(r8 +44) = r2
 125: (77) r2 &gt;&gt;= 8
 126: (73) *(u8 *)(r8 +45) = r2
 127: (b7) r9 = 0
; pFileData-&gt;type = type;
 128: (73) *(u8 *)(r8 +35) = r9
 129: (73) *(u8 *)(r8 +34) = r9
 130: (73) *(u8 *)(r8 +33) = r9
 131: (73) *(u8 *)(r8 +32) = r9
 132: (73) *(u8 *)(r8 +31) = r9
 133: (73) *(u8 *)(r8 +30) = r9
 134: (73) *(u8 *)(r8 +29) = r9
 135: (73) *(u8 *)(r8 +28) = r9
; pFileData-&gt;header.protover = PROTOCOL_VERSION;
 136: (73) *(u8 *)(r8 +5) = r9
; pFileData-&gt;type = type;
 137: (73) *(u8 *)(r8 +43) = r9
 138: (73) *(u8 *)(r8 +42) = r9
 139: (73) *(u8 *)(r8 +41) = r9
 140: (73) *(u8 *)(r8 +40) = r9
 141: (73) *(u8 *)(r8 +39) = r9
 142: (73) *(u8 *)(r8 +38) = r9
 143: (73) *(u8 *)(r8 +37) = r9
 144: (73) *(u8 *)(r8 +36) = r9
; u32 tgid = bpf_get_current_pid_tgid() &gt;&gt; 32;
 145: (85) call bpf_get_current_pid_tgid#124560
 146: (bf) r7 = r0
; u32 tid = bpf_get_current_pid_tgid();
 147: (7b) *(u64 *)(r10 -200) = r7
; pFileData-&gt;pid = tgid;
 148: (77) r7 &gt;&gt;= 56
; u32 tid = bpf_get_current_pid_tgid();
 149: (85) call bpf_get_current_pid_tgid#124560
 150: (7b) *(u64 *)(r10 -208) = r0
; pFileData-&gt;pid = tgid;
 151: (73) *(u8 *)(r8 +27) = r7
 152: (79) r7 = *(u64 *)(r10 -200)
 153: (bf) r1 = r7
 154: (77) r1 &gt;&gt;= 48
 155: (73) *(u8 *)(r8 +26) = r1
 156: (bf) r1 = r7
 157: (77) r1 &gt;&gt;= 40
 158: (73) *(u8 *)(r8 +25) = r1
; u32 tgid = bpf_get_current_pid_tgid() &gt;&gt; 32;
 159: (77) r7 &gt;&gt;= 32
; pFileData-&gt;pid = tgid;
 160: (73) *(u8 *)(r8 +24) = r7
; pFileData-&gt;ktime_event = bpf_ktime_get_ns();
 161: (85) call bpf_ktime_get_ns#124928
; pFileData-&gt;ktime_proc = 0;
 162: (73) *(u8 *)(r8 +23) = r9
 163: (73) *(u8 *)(r8 +22) = r9
 164: (73) *(u8 *)(r8 +21) = r9
 165: (73) *(u8 *)(r8 +20) = r9
 166: (73) *(u8 *)(r8 +19) = r9
 167: (73) *(u8 *)(r8 +18) = r9
 168: (73) *(u8 *)(r8 +17) = r9
 169: (73) *(u8 *)(r8 +16) = r9
; pFileData-&gt;ktime_event = bpf_ktime_get_ns();
 170: (bf) r1 = r0
 171: (77) r1 &gt;&gt;= 56
 172: (73) *(u8 *)(r8 +15) = r1
 173: (bf) r1 = r0
 174: (77) r1 &gt;&gt;= 48
 175: (73) *(u8 *)(r8 +14) = r1
 176: (bf) r1 = r0
 177: (77) r1 &gt;&gt;= 40
 178: (73) *(u8 *)(r8 +13) = r1
 179: (bf) r1 = r0
 180: (77) r1 &gt;&gt;= 32
 181: (73) *(u8 *)(r8 +12) = r1
 182: (bf) r1 = r0
 183: (77) r1 &gt;&gt;= 24
 184: (73) *(u8 *)(r8 +11) = r1
 185: (bf) r1 = r0
 186: (77) r1 &gt;&gt;= 16
 187: (73) *(u8 *)(r8 +10) = r1
 188: (73) *(u8 *)(r8 +8) = r0
 189: (77) r0 &gt;&gt;= 8
 190: (73) *(u8 *)(r8 +9) = r0
; struct task_struct *task = bpf_get_current_task();
 191: (85) call bpf_get_current_task#-55200
; if(task)
 192: (15) if r0 == 0x0 goto pc+48
 193: (79) r1 = *(u64 *)(r10 -208)
; u32 tid = bpf_get_current_pid_tgid();
 194: (67) r1 &lt;&lt;= 32
 195: (77) r1 &gt;&gt;= 32
; if(tgid != tid)
 196: (1d) if r7 == r1 goto pc+10
 197: (b7) r1 = 0
; struct task_struct *group_leader = READ_KERN(task-&gt;group_leader);
 198: (7b) *(u64 *)(r10 -8) = r1
 199: (b7) r1 = 2368
 200: (0f) r0 += r1
 201: (bf) r1 = r10
; 
 202: (07) r1 += -8
; struct task_struct *group_leader = READ_KERN(task-&gt;group_leader);
 203: (b7) r2 = 8
 204: (bf) r3 = r0
 205: (85) call bpf_probe_read_kernel#-51920
 206: (79) r0 = *(u64 *)(r10 -8)
 207: (b7) r1 = 0
; if(task == NULL)
 208: (15) if r0 == 0x0 goto pc+11
 209: (b7) r1 = 0
; stime = READ_KERN(new_task-&gt;start_boottime);
 210: (b7) r1 = 0
; stime = READ_KERN(task-&gt;real_start_time);
 211: (7b) *(u64 *)(r10 -8) = r1
 212: (b7) r1 = 2664
 213: (0f) r0 += r1
 214: (bf) r1 = r10
; 
 215: (07) r1 += -8
 216: (b7) r2 = 8
 217: (bf) r3 = r0
 218: (85) call bpf_probe_read_kernel#-51920
 219: (79) r1 = *(u64 *)(r10 -8)
; pFileData-&gt;ktime_proc = get_task_start_time(task);
 220: (bf) r2 = r1
 221: (77) r2 &gt;&gt;= 56
 222: (73) *(u8 *)(r8 +23) = r2
 223: (bf) r2 = r1
 224: (77) r2 &gt;&gt;= 48
 225: (73) *(u8 *)(r8 +22) = r2
 226: (bf) r2 = r1
 227: (77) r2 &gt;&gt;= 40
 228: (73) *(u8 *)(r8 +21) = r2
 229: (bf) r2 = r1
 230: (77) r2 &gt;&gt;= 32
 231: (73) *(u8 *)(r8 +20) = r2
 232: (bf) r2 = r1
 233: (77) r2 &gt;&gt;= 24
 234: (73) *(u8 *)(r8 +19) = r2
 235: (bf) r2 = r1
 236: (77) r2 &gt;&gt;= 16
 237: (73) *(u8 *)(r8 +18) = r2
 238: (73) *(u8 *)(r8 +16) = r1
 239: (77) r1 &gt;&gt;= 8
 240: (73) *(u8 *)(r8 +17) = r1
; bufflength = bufflength - MAX_VALID_BUFSIZE + pFileData-&gt;pathlen;
 241: (71) r5 = *(u8 *)(r8 +45)
 242: (67) r5 &lt;&lt;= 8
 243: (71) r1 = *(u8 *)(r8 +44)
 244: (4f) r5 |= r1
; bufflength = bufflength - MAX_VALID_BUFSIZE + pFileData-&gt;pathlen;
 245: (07) r5 += 8240
; bufflength = bufflength & (MAX_VALID_BUFSIZE - 1);
 246: (57) r5 &= 16383
; bpf_perf_event_output(ctx, &perf_event_array_map, BPF_F_CURRENT_CPU, map_value, bufflength);
 247: (79) r1 = *(u64 *)(r10 -192)
 248: (18) r2 = map[id:2]
 250: (18) r3 = 0xffffffff
 252: (bf) r4 = r8
 253: (85) call bpf_perf_event_output#-50016
; return get_rename_event(ctx, 0, 0, oldname, 0, newname, 0);
 254: (bf) r0 = r6
 255: (95) exit
